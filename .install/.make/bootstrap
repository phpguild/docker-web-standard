-include .env
-include .env.local
-include .env.$(APP_ENV)
-include .env.$(APP_ENV).local
export

COMPOSE_PROJECT_NAME := $(APP_NAME)_$(APP_INSTANCE)

CONTAINER_NGINX := nginx
CONTAINER_PHP := php
CONTAINER_DATABASE := database
CONTAINER_BLACKFIRE := blackfire

DOCKER_NGINX := $(APP_NAME)_$(CONTAINER_NGINX)_$(APP_INSTANCE)
DOCKER_PHP := $(APP_NAME)_$(CONTAINER_PHP)_$(APP_INSTANCE)
DOCKER_DATABASE := $(APP_NAME)_$(CONTAINER_DATABASE)_$(APP_INSTANCE)
DOCKER_BLACKFIRE := $(APP_NAME)_$(CONTAINER_BLACKFIRE)_$(APP_INSTANCE)

SUDO := $(shell sh -c "if [ 0 != $EUID ]; then echo 'sudo'; fi")
KERNEL := $(shell sh -c "uname")
TAR := $(shell sh -c "if command -v gtar >/dev/null 2>&1; then echo 'gtar'; else echo 'tar'; fi")
SED := $(shell sh -c "if 'Linux' != uname >/dev/null 2>&1; then echo 'sed -i ""'; else echo 'sed -i'; fi")

###> phpguild/docker-web-standard ###
-include ./vendor/phpguild/docker-web-standard/.make/composer
-include ./vendor/phpguild/docker-web-standard/.make/crontab
-include ./vendor/phpguild/docker-web-standard/.make/docker
-include ./vendor/phpguild/docker-web-standard/.make/filesystem
-include ./vendor/phpguild/docker-web-standard/.make/git
-include ./vendor/phpguild/docker-web-standard/.make/listening
-include ./vendor/phpguild/docker-web-standard/.make/proxy
-include ./vendor/phpguild/docker-web-standard/.make/ssl
###< phpguild/docker-web-standard ###

## ----------------------------------------------------------
## Main
## ----------------------------------------------------------
.PHONY: install update update-force start start-build restart restart-force stop down dump

_dockerinstall:
	docker-compose build

_composerinstall:
ifeq ($(APP_ENV),prod)
	docker-compose run --rm --no-deps -u $(APP_UID) $(CONTAINER_PHP) php -d memory_limit=-1 /usr/bin/composer --no-dev --optimize-autoloader -v install
else
	docker-compose run --rm --no-deps -u $(APP_UID) $(CONTAINER_PHP) php -d memory_limit=-1 /usr/bin/composer -v install
endif

install:
ifneq ($(APP_NAME),__dwsmyapp__)
	make _preinstall
	make _dockerinstall
	make _composerinstall
	make proxy/compatibility
	make crontab/install
	make ssl/install
	make proxy/install
	make docker/start && echo "Waiting Database..." && sleep 20
	make composer/install
	make app/install
	make filesystem/install
	make listening
	make _postinstall
endif

update:
	make _preupdate
	make docker/stop
	make git/update
	make docker/start
	make composer/install
	make app/update
	make crontab/copy
	make proxy/copy
	make filesystem/install
	make listening
	make _postupdate

update-force:
	make _preupdate
	make docker/down
	make git/update
	make docker/start-build
	make composer/install
	make app/update
	make proxy/restart
	make filesystem/install
	make listening
	make _postupdate

start:
	make docker/start
	make listening

start-build:
	make docker/start-build
	make listening

restart:
	make docker/restart
	make listening

restart-force:
	make docker/restart-force
	make listening

stop:
	make docker/stop

down:
	make docker/down

dump:
	make database/dump
	make filesystem/dump
