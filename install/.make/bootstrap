-include .env
-include .env.local
-include .env.$(APP_ENV)
-include .env.$(APP_ENV).local
export

CONTAINER_PHP := php
CONTAINER_DATABASE := database
DOCKER_PHP := "$(APP_NAME)_$(CONTAINER_PHP)_$(APP_INSTANCE)"
DOCKER_DATABASE := "$(APP_NAME)_$(CONTAINER_DATABASE)_$(APP_INSTANCE)"
SUDO=$(shell sh -c "if [ 0 != $EUID ]; then echo 'sudo'; fi")

## ----------------------------------------------------------
## Status
## ----------------------------------------------------------
.PHONY: listening

listening:
	@echo "Server listening on http://127.0.0.1:$(APP_PORT)"
	@echo "Server listening on https://$(APP_NAME).local.test"

## ----------------------------------------------------------
## Main
## ----------------------------------------------------------
.PHONY: install update update-force start start-build restart restart-force stop down

install:
	make docker/start-build
	make composer/install
	make setup/server
	make setup/project
	make crontab/install
	make logrotate/install
	make app/install
	make filesystem/install
	make proxy/install
	make proxy/restart
	make listening

update:
	make docker/stop
	make git/update
	make docker/start
	make composer/install
	make app/update
	make filesystem/install
	make proxy/restart
	make listening

update-force:
	make docker/down
	make git/update
	make docker/start-build
	make composer/install
	make app/update
	make filesystem/install
	make proxy/restart
	make listening

start:
	make docker/start
	make listening

start-build:
	make docker/start-build
	make listening

restart:
	make docker/restart
	make listening

restart-force:
	make docker/restart-force
	make listening

stop:
	make docker/stop

down:
	make docker/down

## ----------------------------------------------------------
## Docker
## ----------------------------------------------------------
.PHONY: docker/build docker/start docker/start-build docker/stop docker/down docker/restart docker/restart-force

docker/build:
	docker-compose build --no-cache

docker/start:
	docker-compose up -d --remove-orphans

docker/start-build:
	docker-compose up -d --build --remove-orphans

docker/stop:
	docker-compose stop

docker/down:
	docker-compose down

docker/restart:
	make docker/stop
	make docker/start

docker/restart-force:
	make docker/down
	make docker/start-build

## ----------------------------------------------------------
## Composer
## ----------------------------------------------------------
.PHONY: composer/install composer/update

composer/install:
ifeq (prod, $(APP_ENV))
	docker-compose run --rm --no-deps -u $(APP_UID) -v "$(SSH_AUTH_SOCK):/ssh-agent" -e "SSH_AUTH_SOCK=/ssh-agent" $(CONTAINER_PHP) bash -c "APP_ENV=prod php -d memory_limit=-1 /usr/bin/composer --no-dev --optimize-autoloader -v install"
else
	docker-compose run --rm --no-deps -u $(APP_UID) -v "$(SSH_AUTH_SOCK):/ssh-agent" -e "SSH_AUTH_SOCK=/ssh-agent" $(CONTAINER_PHP) php -d memory_limit=-1 /usr/bin/composer install
endif

composer/update:
ifeq (prod, $(APP_ENV))
	docker-compose run --rm --no-deps -u $(APP_UID) -v "$(SSH_AUTH_SOCK):/ssh-agent" -e "SSH_AUTH_SOCK=/ssh-agent" $(CONTAINER_PHP) bash -c "APP_ENV=prod php -d memory_limit=-1 /usr/bin/composer --no-dev --optimize-autoloader -v update"
else
	docker-compose run --rm --no-deps -u $(APP_UID) -v "$(SSH_AUTH_SOCK):/ssh-agent" -e "SSH_AUTH_SOCK=/ssh-agent" $(CONTAINER_PHP) php -d memory_limit=-1 /usr/bin/composer update
endif

## ----------------------------------------------------------
## Filesystem
## ----------------------------------------------------------
.PHONY: filesystem/install

filesystem/install:
ifeq (prod, $(APP_ENV))
	${SUDO} chown -R $(APP_UID):$(APP_UID) ./var
endif
