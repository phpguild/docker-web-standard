server {

	listen 0.0.0.0:80 default_server;

    root /var/www/public;

    log_not_found off;
    log_subrequest on;
    access_log /var/www/var/log/nginx-access.log main buffer=256k flush=10m;
    error_log /var/www/var/log/nginx-error.log error;
    disable_symlinks on;

    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; img-src 'self' data: blob:; object-src 'none';";
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    # Redirect to index.php if the requested file does not exist.
    location / {
        try_files $uri @rewriteapp;
    }

    # Production rule-set.
    location ~ ^/index\.php(/|$) {
        fastcgi_pass php:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_read_timeout 1m;
        include fastcgi_params;

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_param HTTPS on;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    # attempt to load favicon from disk, but provide empty gif as favicon if non exists
    location = /favicon.png { try_files /favicon.png @empty_gif; }
    location = /favicon.ico { try_files /favicon.ico @empty_gif; }
    location @empty_gif     { empty_gif; }

    # API files
    location ~* \.(?:manifest|webmanifest|appcache|html?|xml|json)$ {
        expires -1;
    }

    # Static text files
    location ~* \.(?:rss|atom|txt)$ {
        expires 1h;
        add_header Cache-Control "public";
    }

    # Static CSS/JS files
    location ~* \.(?:css|js)$ {
        expires max;
        access_log off;
        add_header Cache-Control "public";
    }

    # Static images rule
    location ~* \.(?:jpe?g|gif|png|ico|cur|gz|svgz?|mp4|ogg|ogv|webm|htc|eot|ttf|woff2?)$ {
        # Set rules only if the file actually exists.
        if (-f $request_filename) {
            expires max;
            access_log off;
            add_header Cache-Control "public";
        }

        # Rewrite to index.php if the requested file does not exist.
        try_files $uri @rewriteapp;
    }

    # Rewrite rule for PHP files.
    location @rewriteapp {
        rewrite ^(.*)$ /index.php/$1 last;
    }

    # Access deny for dot files
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }
}
